        -:    0:Source:tests.c
        -:    0:Graph:tests.gcno
        -:    0:Data:tests.gcda
        -:    0:Runs:0
        -:    0:Programs:0
        -:    1:// This will contain the test suite using CUnit.
        -:    2:#include <stdio.h>
        -:    3:#include <CUnit/Basic.h>
        -:    4:#include "tic_tac_toe.c" // allow it to access functions and code
        -:    5:
        -:    6:// test funtion for isValidMove function from tic_tac_toe.c
        2:    7:void test_isValidMove(){
        2:    8:    initializeBoard();
        -:    9:    // add some moves to the board
        2:   10:    board[0][0] = 'X'; // top left corner
        2:   11:    board[1][1] = 'O'; // middle
        -:   12:
        -:   13:    // test if the ocupied cell is recognized as invalid
        2:   14:    CU_ASSERT_FALSE(isValidMove(0, 0));
        2:   15:    CU_ASSERT_FALSE(isValidMove(1, 1));
        -:   16:
        -:   17:    // test if the empty cell is recognized as valid
        2:   18:    CU_ASSERT_TRUE(isValidMove(0, 1));
        2:   19:    CU_ASSERT_TRUE(isValidMove(2, 2));
        -:   20:
        -:   21:    // test if the cell outside the board is recognized as invalid
        2:   22:    CU_ASSERT_FALSE(isValidMove(4, 4)); 
        2:   23:}
        -:   24:
        -:   25:// tes for checkWin function from tic_tac_toe.c
    #####:   26:void test_checkWin(){
        -:   27:    // test win condition for rows
    #####:   28:    initializeBoard();
    #####:   29:    board[0][0] = 'X';
    #####:   30:    board[0][1] = 'X';
    #####:   31:    board[0][2] = 'X';
    #####:   32:    CU_ASSERT_TRUE(checkWin('X'));
    #####:   33:    CU_ASSERT_FALSE(checkWin('O'))
        -:   34:
        -:   35:    // test win condition for columns
    #####:   36:    initializeBoard();
    #####:   37:    board[0][0] = 'O';
    #####:   38:    board[1][0] = 'O';
    #####:   39:    board[2][0] = 'O';
    #####:   40:    CU_ASSERT_TRUE(checkWin('O'));
    #####:   41:    CU_ASSERT_FALSE(checkWin('X'));
        -:   42:
        -:   43:    // Test win condition for diagonals
    #####:   44:    initializeBoard();
    #####:   45:    board[0][0] = 'X';
    #####:   46:    board[1][1] = 'X';
    #####:   47:    board[2][2] = 'X';
    #####:   48:    CU_ASSERT_TRUE(checkWin('X'));
    #####:   49:    CU_ASSERT_FALSE(checkWin('O'));
        -:   50:
    #####:   51:    initializeBoard();
    #####:   52:    board[0][2] = 'O';
    #####:   53:    board[1][1] = 'O';
    #####:   54:    board[2][0] = 'O';
    #####:   55:    CU_ASSERT_TRUE(checkWin('O'));
    #####:   56:    CU_ASSERT_FALSE(checkWin('X'));
        -:   57:
    #####:   58:}
        -:   59:
    #####:   60:int main() {
        -:   61:    // Initialize CUnit test registry
    #####:   62:    if (CUE_SUCCESS != CU_initialize_registry()) {
    #####:   63:        return CU_get_error();
        -:   64:    }
        -:   65:    // Add test suite to registry
    #####:   66:    CU_pSuite suite = CU_add_suite("Suite", NULL, NULL);
    #####:   67:    if (NULL == suite) {
    #####:   68:       CU_cleanup_registry();
    #####:   69:       return CU_get_error();
        -:   70:    }
        -:   71:    // add the test funtin to the suite
    #####:   72:    if (NULL == CU_add_test(suite, "Test isValidMove function", test_isValidMove) ||
    #####:   73:        NULL == CU_add_test(suite, "Test Check win function", test_checkWin)) {
    #####:   74:        CU_cleanup_registry(); 
    #####:   75:        return CU_get_error();
        -:   76:    }
        -:   77:    // Set up the basic run mode and run the tests
    #####:   78:    CU_basic_set_mode(CU_BRM_VERBOSE);
    #####:   79:    CU_basic_run_tests();
        -:   80:
        -:   81:    // Clean up the test registry
    #####:   82:    CU_cleanup_registry();
    #####:   83:    return CU_get_error();
        -:   84:
    #####:   85:}
