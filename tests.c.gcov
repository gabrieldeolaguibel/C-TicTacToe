        -:    0:Source:tests.c
        -:    0:Graph:tests.gcno
        -:    0:Data:tests.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// This will contain the test suite using CUnit.
        -:    2:#include <stdio.h>
        -:    3:#include <CUnit/Basic.h>
        -:    4:#include "tic_tac_toe.c" // allow it to access functions and code
        -:    5:
        -:    6:// test funtion for isValidMove function from tic_tac_toe.c
        1:    7:void test_isValidMove(){
        1:    8:    initializeBoard();
        -:    9:    // add some moves to the board
        1:   10:    board[0][0] = 'X'; // top left corner
        1:   11:    board[1][1] = 'O'; // middle
        -:   12:
        -:   13:    // test if the ocupied cell is recognized as invalid
        1:   14:    CU_ASSERT_FALSE(isValidMove(0, 0));
        1:   15:    CU_ASSERT_FALSE(isValidMove(1, 1));
        -:   16:
        -:   17:    // test if the empty cell is recognized as valid
        1:   18:    CU_ASSERT_TRUE(isValidMove(0, 1));
        1:   19:    CU_ASSERT_TRUE(isValidMove(2, 2));
        -:   20:
        -:   21:    // test if the cell outside the board is recognized as invalid
        1:   22:    CU_ASSERT_FALSE(isValidMove(4, 4)); 
        1:   23:}
        -:   24:
        1:   25:int main() {
        -:   26:    // Initialize CUnit test registry
        1:   27:    if (CUE_SUCCESS != CU_initialize_registry()) {
    #####:   28:        return CU_get_error();
        -:   29:    }
        -:   30:    // Add test suite to registry
        1:   31:    CU_pSuite suite = CU_add_suite("Suite", NULL, NULL);
        1:   32:    if (NULL == suite) {
    #####:   33:       CU_cleanup_registry();
    #####:   34:       return CU_get_error();
        -:   35:    }
        -:   36:    // add the test funtin to the suite
        1:   37:    if (NULL == CU_add_test(suite, "Test isValidMove function", test_isValidMove)) {
    #####:   38:        CU_cleanup_registry(); 
    #####:   39:        return CU_get_error();
        -:   40:    }
        -:   41:    // Set up the basic run mode and run the tests
        1:   42:    CU_basic_set_mode(CU_BRM_VERBOSE);
        1:   43:    CU_basic_run_tests();
        -:   44:
        -:   45:    // Clean up the test registry
        1:   46:    CU_cleanup_registry();
        1:   47:    return CU_get_error();
        -:   48:
        1:   49:}
